/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.6
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package swagger.api.demo.testcases;

import io.restassured.response.Response;
import org.springframework.http.HttpMethod;
import org.springframework.web.util.UriComponentsBuilder;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import swagger.api.demo.generated.api.StoreApi;
import swagger.api.demo.generated.model.Order;
import swagger.api.demo.util.ApiException;
import swagger.api.demo.util.BaseTest;
import swagger.api.demo.wrapper.ApiClientWrapper;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * API tests for StoreApi
 */
public class StoreApiTest extends BaseTest {

    private final StoreApi api = new StoreApi();
    private ApiClientWrapper apiClientWrapper;
    private Order NEWLY_CREATED_ORDER = null;

    @BeforeClass
    public void setup() {
        apiClientWrapper = ApiClientWrapper.getInstance(System.getProperty("base_Url"), api.getApiClient());
        apiClientWrapper.addHeader("Content-Type", "application/json");
        api.setApiClient(apiClientWrapper);
    }

    /**
     * Returns pet inventories by status
     *
     * Returns a map of status codes to quantities
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Get Inventory", description = "GET /store/inventory", priority = 1)
    public void getInventoryTest() throws ApiException {
        Response response = apiClientWrapper.invokeAPI("/store/inventory", null, HttpMethod.GET, null);
        Assert.assertEquals(response.getStatusCode(), 200);
    }

    /**
     * Place an order for a pet
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Place Order", description = "POST /store/order", priority = 2)
    public void placeOrderTest() throws IOException, ApiException {
        Order body = new Order();
        body.setPetId(0l);
        body.setStatus(Order.StatusEnum.APPROVED);
        body.setQuantity(1);
        body.setShipDate(getCurrentOffsetDateTime());
        Response response = apiClientWrapper.invokeAPI("/store/order", null, HttpMethod.POST, apiClientWrapper.getMapper().writeValueAsString(body));
        Assert.assertEquals(response.getStatusCode(), 200);
        NEWLY_CREATED_ORDER = apiClientWrapper.getMapper().readValue(response.getBody().asString(), Order.class);
    }

    /**
     * Find purchase order by ID
     *
     * For valid response try integer IDs with value &gt;&#x3D; 1 and &lt;&#x3D; 10. Other values will generated exceptions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Get Order by Id", description = "GET /store/order/{orderId}", dependsOnMethods = "placeOrderTest", priority = 3)
    public void getOrderByIdTest() throws ApiException {
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("orderId", NEWLY_CREATED_ORDER.getId());
        String path = UriComponentsBuilder.fromPath("/store/order/{orderId}").buildAndExpand(uriVariables).toUriString();
        Response response = apiClientWrapper.invokeAPI(path, null, HttpMethod.GET, null);
        Assert.assertEquals(response.getStatusCode(), 200);
    }

    /**
     * Delete purchase order by ID
     *
     * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Delete Order", description = "DELETE /store/order/{orderId}", dependsOnMethods = "placeOrderTest", priority = 4)
    public void deleteOrderTest() throws ApiException {
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("orderId", NEWLY_CREATED_ORDER.getId());
        String path = UriComponentsBuilder.fromPath("/store/order/{orderId}").buildAndExpand(uriVariables).toUriString();
        Response response = apiClientWrapper.invokeAPI(path, null, HttpMethod.DELETE, null);
        Assert.assertEquals(response.getStatusCode(), 200);
    }
}
