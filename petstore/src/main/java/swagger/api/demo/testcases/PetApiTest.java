/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.6
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package swagger.api.demo.testcases;

import io.restassured.response.Response;
import org.springframework.http.HttpMethod;
import org.springframework.web.util.UriComponentsBuilder;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import swagger.api.demo.generated.api.PetApi;
import swagger.api.demo.generated.model.Category;
import swagger.api.demo.generated.model.Pet;
import swagger.api.demo.generated.model.Tag;
import swagger.api.demo.util.ApiException;
import swagger.api.demo.util.BaseTest;
import swagger.api.demo.wrapper.ApiClientWrapper;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PetApi
 */
public class PetApiTest extends BaseTest {

    private final PetApi api = new PetApi();
    private ApiClientWrapper apiClientWrapper;
    private Pet NEWLY_CREATED_PET = null;

    @BeforeClass
    public void setup() {
        apiClientWrapper = ApiClientWrapper.getInstance(System.getProperty("base_Url"), api.getApiClient());
        apiClientWrapper.addHeader("Content-Type", "application/json");
        api.setApiClient(apiClientWrapper);
    }

    /**
     * Finds Pets by status
     *
     * Multiple status values can be provided with comma separated strings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Find Pet by Status", description = "/pet/findByStatus", priority = 1)
    public void findPetsByStatusTest() throws ApiException {
        Response response = apiClientWrapper.invokeAPI("/pet/findByStatus?status=available", null, HttpMethod.GET, null);
        Assert.assertEquals(response.getStatusCode(), 200);
    }

    /**
     * Add a new pet to the store
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Add Pet", description = "POST /pet", priority = 2)
    public void addPetTest() throws IOException, ApiException {
        Pet body = new Pet();
        Category category = new Category();
        category.setName("Test Name");
        body.setCategory(category);
        body.setName("Test Name");
        body.setStatus(Pet.StatusEnum.AVAILABLE);
        List<Tag> tags = new ArrayList<>();
        Tag tag = new Tag();
        tag.setId(0L);
        tag.setName("TestTag");
        tags.add(tag);
        body.setTags(tags);
        Response response = apiClientWrapper.invokeAPI("/pet", null, HttpMethod.POST, apiClientWrapper.getMapper().writeValueAsString(body));
        Assert.assertEquals(response.getStatusCode(), 200);
        NEWLY_CREATED_PET = apiClientWrapper.getMapper().readValue(response.getBody().asString(), Pet.class);
    }

    /**
     * Find pet by ID
     *
     * Returns a single pet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Find Pet by Id", description = "GET /pet/{petId}", dependsOnMethods = "addPetTest", priority = 3)
    public void getPetByIdTest() throws ApiException, IOException {
        final Map<String, Object> uriVariables = new HashMap<>();
        uriVariables.put("petId", NEWLY_CREATED_PET.getId());
        String path = UriComponentsBuilder.fromPath("/pet/{petId}").buildAndExpand(uriVariables).toUriString();
        Response response = apiClientWrapper.invokeAPI(path, null, HttpMethod.GET, null);
        Assert.assertEquals(response.getStatusCode(), 200);
        Pet petDetails = apiClientWrapper.getMapper().readValue(response.getBody().asString(), Pet.class);
        Assert.assertEquals(petDetails.getId(), NEWLY_CREATED_PET.getId());
    }

    /**
     * Update an existing pet
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Update Pet", description = "PUT /pet", dependsOnMethods = "addPetTest", priority = 4)
    public void updatePetTest() throws IOException, ApiException {
        NEWLY_CREATED_PET.setName("Updated Name");
        Response response = apiClientWrapper.invokeAPI("/pet", null, HttpMethod.PUT, apiClientWrapper.getMapper().writeValueAsString(NEWLY_CREATED_PET));
        Assert.assertEquals(response.getStatusCode(), 200);
        Pet petDetails = apiClientWrapper.getMapper().readValue(response.getBody().asString(), Pet.class);
        Assert.assertEquals(petDetails.getName(), "Updated Name");
    }

    /**
     * Deletes a pet
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Delete Pet", description = "DELETE /pet/{petId}", dependsOnMethods = "addPetTest", priority = 5)
    public void deletePetTest() throws ApiException {
        final Map<String, Object> uriVariables = new HashMap<>();
        uriVariables.put("petId", NEWLY_CREATED_PET.getId());
        String path = UriComponentsBuilder.fromPath("/pet/{petId}").buildAndExpand(uriVariables).toUriString();
        Response response = apiClientWrapper.invokeAPI(path, null, HttpMethod.DELETE, null);
        Assert.assertEquals(response.getStatusCode(), 200);
    }
}
