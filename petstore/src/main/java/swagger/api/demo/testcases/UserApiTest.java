/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.6
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package swagger.api.demo.testcases;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.restassured.response.Response;
import org.springframework.http.HttpMethod;
import org.springframework.web.util.UriComponentsBuilder;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Ignore;
import org.testng.annotations.Test;
import swagger.api.demo.generated.api.UserApi;
import swagger.api.demo.generated.model.Pet;
import swagger.api.demo.generated.model.User;
import swagger.api.demo.util.ApiException;
import swagger.api.demo.util.BaseTest;
import swagger.api.demo.util.JsonUtil;
import swagger.api.demo.wrapper.ApiClientWrapper;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
public class UserApiTest extends BaseTest {

    private final UserApi api = new UserApi();
    private ApiClientWrapper apiClientWrapper;
    private User NEWLY_CREATED_USER = null;

    @BeforeClass
    public void setup() {
        apiClientWrapper = ApiClientWrapper.getInstance(System.getProperty("base_Url"), api.getApiClient());
        apiClientWrapper.addHeader("Content-Type", "application/json");
        api.setApiClient(apiClientWrapper);
    }

    /**
     * Create user
     *
     * This can only be done by the logged in user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Create User", description = "POST /user", priority = 1)
    public void createUserTest() throws IOException, ApiException {
        NEWLY_CREATED_USER = new User();
        NEWLY_CREATED_USER.setEmail("test@test.com");
        NEWLY_CREATED_USER.setUsername("testAutomation");
        NEWLY_CREATED_USER.setPassword("testAutomation");
        NEWLY_CREATED_USER.setFirstName("Test");
        NEWLY_CREATED_USER.setLastName("Automation");
        NEWLY_CREATED_USER.setPhone("000-000-0000");
        NEWLY_CREATED_USER.setUserStatus(1);
        Response response = apiClientWrapper.invokeAPI("/user", null, HttpMethod.POST, apiClientWrapper.getMapper().writeValueAsString(NEWLY_CREATED_USER));
        Assert.assertEquals(response.getStatusCode(), 200);
    }

    /**
     * Get user by user name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Get User by Username", description = "GET /user/{username}", dependsOnMethods = "createUserTest", priority = 2)
    public void getUserByNameTest() throws ApiException, IOException {
        final Map<String, Object> uriVariables = new HashMap<>();
        uriVariables.put("username", NEWLY_CREATED_USER.getUsername());
        String path = UriComponentsBuilder.fromPath("/user/{username}").buildAndExpand(uriVariables).toUriString();
        Response response = apiClientWrapper.invokeAPI(path, null, HttpMethod.GET, null);
        Assert.assertEquals(response.getStatusCode(), 200);
        User userDetails = apiClientWrapper.getMapper().readValue(response.getBody().asString(), User.class);
        Assert.assertEquals(userDetails.getUsername(), NEWLY_CREATED_USER.getUsername());
    }

    /**
     * Logs user into the system
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Login User", description = "GET /user/login", dependsOnMethods = "createUserTest", priority = 3)
    public void loginUserTest() throws ApiException {
        final Map<String, Object> queryParams = new HashMap<>();
        queryParams.put("username", NEWLY_CREATED_USER.getUsername());
        queryParams.put("password", NEWLY_CREATED_USER.getPassword());
        Response response = apiClientWrapper.invokeAPI("/user/login", queryParams, HttpMethod.GET, null);
        Assert.assertEquals(response.getStatusCode(), 200);
    }

    /**
     * Logs out current logged in user session
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Logout User", description = "GET /user/logout", dependsOnMethods = "createUserTest", priority = 4)
    public void logoutUserTest() throws ApiException {
        Response response = apiClientWrapper.invokeAPI("/user/logout", null, HttpMethod.GET, null);
        Assert.assertEquals(response.getStatusCode(), 200);
    }

    /**
     * Updated user
     *
     * This can only be done by the logged in user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Update User", description = "PUT /user/{username}", dependsOnMethods = "createUserTest", priority = 5)
    public void updateUserTest() throws IOException, ApiException {
        NEWLY_CREATED_USER.setLastName("Updated Last Name");
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("username", NEWLY_CREATED_USER.getUsername());
        String path = UriComponentsBuilder.fromPath("/user/{username}").buildAndExpand(uriVariables).toUriString();
        Response response = apiClientWrapper.invokeAPI(path, null, HttpMethod.PUT, apiClientWrapper.getMapper().writeValueAsString(NEWLY_CREATED_USER));
        Assert.assertEquals(response.getStatusCode(), 200);
    }

    /**
     * Delete user
     *
     * This can only be done by the logged in user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(testName = "Delete User", description = "DELETE /user/{username}", dependsOnMethods = "createUserTest", priority = 6)
    public void deleteUserTest() throws ApiException {
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("username", NEWLY_CREATED_USER.getUsername());
        String path = UriComponentsBuilder.fromPath("/user/{username}").buildAndExpand(uriVariables).toUriString();
        Response response = apiClientWrapper.invokeAPI(path, null, HttpMethod.DELETE, null);
        Assert.assertEquals(response.getStatusCode(), 200);
    }
}
